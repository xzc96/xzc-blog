export const data = JSON.parse("{\"key\":\"v-4570c261\",\"path\":\"/%E6%9D%82%E8%AE%B0/%E9%80%9A%E8%BF%87%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0/\",\"title\":\"\",\"lang\":\"zh-CN\",\"frontmatter\":{\"description\":\"使用配置文件去创建线程池方便定时任务的调用 /** * @projectName zbxc * @package com.thunisoft.zbxc.config * @className com.thunisoft.zbxc.config.ScheduleConfig * @copyright Copyright 2020 Thunisoft, Inc All rights reserved. */ package com.thunisoft.zbxc.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor; import java.util.concurrent.Executor; import java.util.concurrent.ThreadPoolExecutor; /** * ScheduleConfig * @description 定时任务配置类 * @author xzc * @date 2021-8-23 17:15 * @version 1.0 */ @Configuration public class ScheduleConfig { /** size */ private static final Integer SIZE = 4; /** qsize */ private static final Integer QSIZE = 10; /** sec */ private static final Integer SEC = 60; /** * * ScheduleConfig * * @description 定时任务线程池. * @return java.util.concurrent.Executor * @date 2021-8-25 10:52 * @author xzc * @version 1.0 */ @Bean public Executor myAsync() { ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor(); //最大线程数 executor.setMaxPoolSize(SIZE); //核心线程数 executor.setCorePoolSize(SIZE); //任务队列的大小 executor.setQueueCapacity(QSIZE); //线程前缀名 executor.setThreadNamePrefix(\\\"zbxc-thread-\\\"); //线程存活时间 executor.setKeepAliveSeconds(SEC); /** * 拒绝处理策略 * CallerRunsPolicy()：交由调用方线程运行，比如 main 线程。 * AbortPolicy()：直接抛出异常。 * DiscardPolicy()：直接丢弃。 * DiscardOldestPolicy()：丢弃队列中最老的任务。 */ executor.setRejectedExecutionHandler(new ThreadPoolExecutor.DiscardOldestPolicy()); //线程初始化 executor.initialize(); return executor; } }\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://mister-hope.github.io/%E6%9D%82%E8%AE%B0/%E9%80%9A%E8%BF%87%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Jankin'Blog\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"使用配置文件去创建线程池方便定时任务的调用 /** * @projectName zbxc * @package com.thunisoft.zbxc.config * @className com.thunisoft.zbxc.config.ScheduleConfig * @copyright Copyright 2020 Thunisoft, Inc All rights reserved. */ package com.thunisoft.zbxc.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor; import java.util.concurrent.Executor; import java.util.concurrent.ThreadPoolExecutor; /** * ScheduleConfig * @description 定时任务配置类 * @author xzc * @date 2021-8-23 17:15 * @version 1.0 */ @Configuration public class ScheduleConfig { /** size */ private static final Integer SIZE = 4; /** qsize */ private static final Integer QSIZE = 10; /** sec */ private static final Integer SEC = 60; /** * * ScheduleConfig * * @description 定时任务线程池. * @return java.util.concurrent.Executor * @date 2021-8-25 10:52 * @author xzc * @version 1.0 */ @Bean public Executor myAsync() { ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor(); //最大线程数 executor.setMaxPoolSize(SIZE); //核心线程数 executor.setCorePoolSize(SIZE); //任务队列的大小 executor.setQueueCapacity(QSIZE); //线程前缀名 executor.setThreadNamePrefix(\\\"zbxc-thread-\\\"); //线程存活时间 executor.setKeepAliveSeconds(SEC); /** * 拒绝处理策略 * CallerRunsPolicy()：交由调用方线程运行，比如 main 线程。 * AbortPolicy()：直接抛出异常。 * DiscardPolicy()：直接丢弃。 * DiscardOldestPolicy()：丢弃队列中最老的任务。 */ executor.setRejectedExecutionHandler(new ThreadPoolExecutor.DiscardOldestPolicy()); //线程初始化 executor.initialize(); return executor; } }\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"JanKin Xie\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"JanKin Xie\\\",\\\"url\\\":\\\"\\\"}]}\"]]},\"headers\":[{\"level\":3,\"title\":\"使用配置文件去创建线程池方便定时任务的调用\",\"slug\":\"使用配置文件去创建线程池方便定时任务的调用\",\"link\":\"#使用配置文件去创建线程池方便定时任务的调用\",\"children\":[]}],\"readingTime\":{\"minutes\":0.95,\"words\":284},\"filePathRelative\":\"杂记/通过配置文件创建线程池/README.md\",\"excerpt\":\"<h3> 使用配置文件去创建线程池方便定时任务的调用</h3>\\n<div class=\\\"language-java line-numbers-mode\\\" data-ext=\\\"java\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token doc-comment comment\\\">/**\\n * <span class=\\\"token keyword\\\">@projectName</span> zbxc\\n * <span class=\\\"token keyword\\\">@package</span> com.thunisoft.zbxc.config\\n * <span class=\\\"token keyword\\\">@className</span> com.thunisoft.zbxc.config.ScheduleConfig\\n * <span class=\\\"token keyword\\\">@copyright</span> Copyright 2020 Thunisoft, Inc All rights reserved.\\n */</span>\\n<span class=\\\"token keyword\\\">package</span> <span class=\\\"token namespace\\\">com<span class=\\\"token punctuation\\\">.</span>thunisoft<span class=\\\"token punctuation\\\">.</span>zbxc<span class=\\\"token punctuation\\\">.</span>config</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token import\\\"><span class=\\\"token namespace\\\">org<span class=\\\"token punctuation\\\">.</span>springframework<span class=\\\"token punctuation\\\">.</span>context<span class=\\\"token punctuation\\\">.</span>annotation<span class=\\\"token punctuation\\\">.</span></span><span class=\\\"token class-name\\\">Bean</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token import\\\"><span class=\\\"token namespace\\\">org<span class=\\\"token punctuation\\\">.</span>springframework<span class=\\\"token punctuation\\\">.</span>context<span class=\\\"token punctuation\\\">.</span>annotation<span class=\\\"token punctuation\\\">.</span></span><span class=\\\"token class-name\\\">Configuration</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token import\\\"><span class=\\\"token namespace\\\">org<span class=\\\"token punctuation\\\">.</span>springframework<span class=\\\"token punctuation\\\">.</span>scheduling<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span></span><span class=\\\"token class-name\\\">ThreadPoolTaskExecutor</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token import\\\"><span class=\\\"token namespace\\\">java<span class=\\\"token punctuation\\\">.</span>util<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span></span><span class=\\\"token class-name\\\">Executor</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token import\\\"><span class=\\\"token namespace\\\">java<span class=\\\"token punctuation\\\">.</span>util<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span></span><span class=\\\"token class-name\\\">ThreadPoolExecutor</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token doc-comment comment\\\">/**\\n * ScheduleConfig\\n * <span class=\\\"token keyword\\\">@description</span> 定时任务配置类\\n * <span class=\\\"token keyword\\\">@author</span> xzc\\n * <span class=\\\"token keyword\\\">@date</span> 2021-8-23 17:15\\n * <span class=\\\"token keyword\\\">@version</span> 1.0\\n */</span>\\n<span class=\\\"token annotation punctuation\\\">@Configuration</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ScheduleConfig</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n    <span class=\\\"token doc-comment comment\\\">/** size */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token class-name\\\">Integer</span> <span class=\\\"token constant\\\">SIZE</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token doc-comment comment\\\">/** qsize */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token class-name\\\">Integer</span> <span class=\\\"token constant\\\">QSIZE</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token doc-comment comment\\\">/** sec */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token class-name\\\">Integer</span> <span class=\\\"token constant\\\">SEC</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">60</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token doc-comment comment\\\">/**\\n     *\\n     * ScheduleConfig\\n     *\\n     * <span class=\\\"token keyword\\\">@description</span> 定时任务线程池.\\n     * <span class=\\\"token keyword\\\">@return</span> java.util.concurrent.Executor\\n     * <span class=\\\"token keyword\\\">@date</span> 2021-8-25 10:52\\n     * <span class=\\\"token keyword\\\">@author</span> xzc\\n     * <span class=\\\"token keyword\\\">@version</span> 1.0\\n     */</span>\\n    <span class=\\\"token annotation punctuation\\\">@Bean</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">Executor</span> <span class=\\\"token function\\\">myAsync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\">ThreadPoolTaskExecutor</span> executor <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ThreadPoolTaskExecutor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">//最大线程数</span>\\n        executor<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setMaxPoolSize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">SIZE</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">//核心线程数</span>\\n        executor<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setCorePoolSize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">SIZE</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">//任务队列的大小</span>\\n        executor<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setQueueCapacity</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">QSIZE</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">//线程前缀名</span>\\n        executor<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setThreadNamePrefix</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"zbxc-thread-\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">//线程存活时间</span>\\n        executor<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setKeepAliveSeconds</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">SEC</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token doc-comment comment\\\">/**\\n         * 拒绝处理策略\\n         * CallerRunsPolicy()：交由调用方线程运行，比如 main 线程。\\n         * AbortPolicy()：直接抛出异常。\\n         * DiscardPolicy()：直接丢弃。\\n         * DiscardOldestPolicy()：丢弃队列中最老的任务。\\n         */</span>\\n        executor<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setRejectedExecutionHandler</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ThreadPoolExecutor<span class=\\\"token punctuation\\\">.</span>DiscardOldestPolicy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">//线程初始化</span>\\n        executor<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">initialize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> executor<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
