export const data = JSON.parse("{\"key\":\"v-46aba8e3\",\"path\":\"/%E6%9D%82%E8%AE%B0/%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B/%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B.html\",\"title\":\"函数接口编程\",\"lang\":\"zh-CN\",\"frontmatter\":{\"description\":\"函数接口编程 有一个注解@FunctionalInterface，只能标注在函数式接口上面 jdk1.8源码下面的tr.jar包下面的java.util.function 里面基本都是函数式接口列举几个必须非常熟悉掌握的： Supplier 代表一个输出 Consumer 代表一个输入 BiConsumer 代表两个输入 Function 代表一个输入，一个输出（一般输入和输出是不同类型的） UnaryOperator 代表一个输入，一个输出（输入和输出是相同类型的） BiFunction 代表两个输入，一个输出（一般输入和输出是不同类型的） BinaryOperator 代表两个输入，一个输出（输入和输出是相同类型的）\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://mister-hope.github.io/%E6%9D%82%E8%AE%B0/%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B/%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Jankin'Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"函数接口编程\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"函数接口编程 有一个注解@FunctionalInterface，只能标注在函数式接口上面 jdk1.8源码下面的tr.jar包下面的java.util.function 里面基本都是函数式接口列举几个必须非常熟悉掌握的： Supplier 代表一个输出 Consumer 代表一个输入 BiConsumer 代表两个输入 Function 代表一个输入，一个输出（一般输入和输出是不同类型的） UnaryOperator 代表一个输入，一个输出（输入和输出是相同类型的） BiFunction 代表两个输入，一个输出（一般输入和输出是不同类型的） BinaryOperator 代表两个输入，一个输出（输入和输出是相同类型的）\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"JanKin Xie\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"函数接口编程\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"JanKin Xie\\\",\\\"url\\\":\\\"\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"3.1、Supplier接口\",\"slug\":\"_3-1、supplier接口\",\"link\":\"#_3-1、supplier接口\",\"children\":[]},{\"level\":2,\"title\":\"3.2、Consumer接口\",\"slug\":\"_3-2、consumer接口\",\"link\":\"#_3-2、consumer接口\",\"children\":[]},{\"level\":2,\"title\":\"3.3、Predicate接口\",\"slug\":\"_3-3、predicate接口\",\"link\":\"#_3-3、predicate接口\",\"children\":[]},{\"level\":2,\"title\":\"3.4、Function接口\",\"slug\":\"_3-4、function接口\",\"link\":\"#_3-4、function接口\",\"children\":[]},{\"level\":2,\"title\":\"Function\",\"slug\":\"function\",\"link\":\"#function\",\"children\":[{\"level\":3,\"title\":\"使用function作过滤器，减少if的使用\",\"slug\":\"使用function作过滤器-减少if的使用\",\"link\":\"#使用function作过滤器-减少if的使用\",\"children\":[]}]}],\"readingTime\":{\"minutes\":7.46,\"words\":2238},\"filePathRelative\":\"杂记/函数接口编程/函数接口编程.md\",\"excerpt\":\"<h1> 函数接口编程</h1>\\n<p>有一个注解<code>@FunctionalInterface</code>，只能标注在函数式接口上面</p>\\n<p>jdk1.8源码下面的tr.jar包下面的java.util.function</p>\\n<p>里面基本都是函数式接口列举几个必须非常熟悉掌握的：</p>\\n<div class=\\\"language-java line-numbers-mode\\\" data-ext=\\\"java\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token class-name\\\">Supplier</span> 代表一个输出 \\n<span class=\\\"token class-name\\\">Consumer</span> 代表一个输入 \\n<span class=\\\"token class-name\\\">BiConsumer</span> 代表两个输入 \\n<span class=\\\"token class-name\\\">Function</span> 代表一个输入，一个输出（一般输入和输出是不同类型的） \\n<span class=\\\"token class-name\\\">UnaryOperator</span> 代表一个输入，一个输出（输入和输出是相同类型的） \\n<span class=\\\"token class-name\\\">BiFunction</span> 代表两个输入，一个输出（一般输入和输出是不同类型的） \\n<span class=\\\"token class-name\\\">BinaryOperator</span> 代表两个输入，一个输出（输入和输出是相同类型的）\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
