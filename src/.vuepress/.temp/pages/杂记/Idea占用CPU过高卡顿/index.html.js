export const data = JSON.parse("{\"key\":\"v-ddc6d98c\",\"path\":\"/%E6%9D%82%E8%AE%B0/Idea%E5%8D%A0%E7%94%A8CPU%E8%BF%87%E9%AB%98%E5%8D%A1%E9%A1%BF/\",\"title\":\"idea占用CPU过高解决办法\",\"lang\":\"zh-CN\",\"frontmatter\":{\"description\":\"idea占用CPU过高解决办法 打开监控页面，发现JIT即使编辑占大头，这也解释了为什么每当我在修改新的代码文件的内容时 CPU 占用率飙升，因为 JIT Compiler 即时编译将 class 文件编译成本地机器代码占用了大量的 CPU 资源导致的卡顿 image-20230313110106520 解决办法： image-20230313110359683 # 堆栈设置 -Xms2048m -Xmx4096m -Xverify:none -XX:+DisableExplicitGC -XX:ReservedCodeCacheSize=720m -XX:+UseConcMarkSweepGC -XX:SoftRefLRUPolicyMSPerMB=50 -ea -Dsun.io.useCanonCaches=false -Djava.net.preferIPv4Stack=true -Djdk.http.auth.tunneling.disabledSchemes=\\\"\\\" -XX:+HeapDumpOnOutOfMemoryError -XX:-OmitStackTraceInFastThrow # JIT 参数 # 设置用于编译的编译器线程数 -XX:CICompilerCount=2 # 开启分层编译 -XX:TieredStopAtLevel=1 # 控制最大数量嵌套调用内联 -XX:MaxInlineLevel=3 # 即时编译的东西（没弄懂...） -XX:Tier4MinInvocationThreshold=100000 -XX:Tier4InvocationThreshold=110000 -XX:Tier4CompileThreshold=120000\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://mister-hope.github.io/%E6%9D%82%E8%AE%B0/Idea%E5%8D%A0%E7%94%A8CPU%E8%BF%87%E9%AB%98%E5%8D%A1%E9%A1%BF/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Jankin'Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"idea占用CPU过高解决办法\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"idea占用CPU过高解决办法 打开监控页面，发现JIT即使编辑占大头，这也解释了为什么每当我在修改新的代码文件的内容时 CPU 占用率飙升，因为 JIT Compiler 即时编译将 class 文件编译成本地机器代码占用了大量的 CPU 资源导致的卡顿 image-20230313110106520 解决办法： image-20230313110359683 # 堆栈设置 -Xms2048m -Xmx4096m -Xverify:none -XX:+DisableExplicitGC -XX:ReservedCodeCacheSize=720m -XX:+UseConcMarkSweepGC -XX:SoftRefLRUPolicyMSPerMB=50 -ea -Dsun.io.useCanonCaches=false -Djava.net.preferIPv4Stack=true -Djdk.http.auth.tunneling.disabledSchemes=\\\"\\\" -XX:+HeapDumpOnOutOfMemoryError -XX:-OmitStackTraceInFastThrow # JIT 参数 # 设置用于编译的编译器线程数 -XX:CICompilerCount=2 # 开启分层编译 -XX:TieredStopAtLevel=1 # 控制最大数量嵌套调用内联 -XX:MaxInlineLevel=3 # 即时编译的东西（没弄懂...） -XX:Tier4MinInvocationThreshold=100000 -XX:Tier4InvocationThreshold=110000 -XX:Tier4CompileThreshold=120000\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://mister-hope.github.io/\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"name\":\"twitter:card\",\"content\":\"summary_large_image\"}],[\"meta\",{\"name\":\"twitter:image:alt\",\"content\":\"idea占用CPU过高解决办法\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"JanKin Xie\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"idea占用CPU过高解决办法\\\",\\\"image\\\":[\\\"https://mister-hope.github.io/\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"JanKin Xie\\\",\\\"url\\\":\\\"\\\"}]}\"]]},\"headers\":[],\"readingTime\":{\"minutes\":0.91,\"words\":272},\"filePathRelative\":\"杂记/Idea占用CPU过高卡顿/README.md\",\"excerpt\":\"<h1> idea占用CPU过高解决办法</h1>\\n<p>打开监控页面，发现JIT即使编辑占大头，这也解释了为什么每当我在修改新的代码文件的内容时 CPU 占用率飙升，因为 JIT Compiler 即时编译将 class 文件编译成本地机器代码占用了大量的 CPU 资源导致的卡顿</p>\\n<figure><figcaption>image-20230313110106520</figcaption></figure>\\n<p>解决办法：</p>\\n<figure><figcaption>image-20230313110359683</figcaption></figure>\\n<div class=\\\"language-text line-numbers-mode\\\" data-ext=\\\"text\\\"><pre class=\\\"language-text\\\"><code># 堆栈设置\\n\\n-Xms2048m\\n-Xmx4096m\\n-Xverify:none\\n-XX:+DisableExplicitGC\\n-XX:ReservedCodeCacheSize=720m\\n-XX:+UseConcMarkSweepGC\\n-XX:SoftRefLRUPolicyMSPerMB=50\\n-ea\\n-Dsun.io.useCanonCaches=false\\n-Djava.net.preferIPv4Stack=true\\n-Djdk.http.auth.tunneling.disabledSchemes=\\\"\\\"\\n-XX:+HeapDumpOnOutOfMemoryError\\n-XX:-OmitStackTraceInFastThrow\\n\\n# JIT 参数\\n\\n# 设置用于编译的编译器线程数\\n-XX:CICompilerCount=2\\n# 开启分层编译\\n-XX:TieredStopAtLevel=1\\n# 控制最大数量嵌套调用内联\\n-XX:MaxInlineLevel=3\\n# 即时编译的东西（没弄懂...）\\n-XX:Tier4MinInvocationThreshold=100000\\n-XX:Tier4InvocationThreshold=110000\\n-XX:Tier4CompileThreshold=120000\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
