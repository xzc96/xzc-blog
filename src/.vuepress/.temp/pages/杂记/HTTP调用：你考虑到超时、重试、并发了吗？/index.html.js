export const data = JSON.parse("{\"key\":\"v-31bcaa60\",\"path\":\"/%E6%9D%82%E8%AE%B0/HTTP%E8%B0%83%E7%94%A8%EF%BC%9A%E4%BD%A0%E8%80%83%E8%99%91%E5%88%B0%E8%B6%85%E6%97%B6%E3%80%81%E9%87%8D%E8%AF%95%E3%80%81%E5%B9%B6%E5%8F%91%E4%BA%86%E5%90%97%EF%BC%9F/\",\"title\":\"\",\"lang\":\"zh-CN\",\"frontmatter\":{\"description\":\"今天，我们一起聊聊进行 HTTP 调用需要注意的超时、重试、并发等问题。 与执行本地方法不同，进行 HTTP 调用本质上是通过 HTTP 协议进行一次网络请求。网络请求必然有超时的可能性，因此我们必须考虑到这三点： 首先，框架设置的默认超时是否合理； 其次，考虑到网络的不稳定，超时后的请求重试是一个不错的选择，但需要考虑服务端接口的幂等性设计是否允许我们重试； 最后，需要考虑框架是否会像浏览器那样限制并发连接数，以免在服务并发很大的情况下，HTTP 调用的并发数限制成为瓶颈。 Spring Cloud 是 Java 微服务架构的代表性框架。如果使用 Spring Cloud 进行微服务开发，就会使用 Feign 进行声明式的服务调用。如果不使用 Spring Cloud，而直接使用 Spring Boot 进行微服务开发的话，可能会直接使用 Java 中最常用的 HTTP 客户端 Apache HttpClient 进行服务调用。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://mister-hope.github.io/%E6%9D%82%E8%AE%B0/HTTP%E8%B0%83%E7%94%A8%EF%BC%9A%E4%BD%A0%E8%80%83%E8%99%91%E5%88%B0%E8%B6%85%E6%97%B6%E3%80%81%E9%87%8D%E8%AF%95%E3%80%81%E5%B9%B6%E5%8F%91%E4%BA%86%E5%90%97%EF%BC%9F/\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Jankin'Blog\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"今天，我们一起聊聊进行 HTTP 调用需要注意的超时、重试、并发等问题。 与执行本地方法不同，进行 HTTP 调用本质上是通过 HTTP 协议进行一次网络请求。网络请求必然有超时的可能性，因此我们必须考虑到这三点： 首先，框架设置的默认超时是否合理； 其次，考虑到网络的不稳定，超时后的请求重试是一个不错的选择，但需要考虑服务端接口的幂等性设计是否允许我们重试； 最后，需要考虑框架是否会像浏览器那样限制并发连接数，以免在服务并发很大的情况下，HTTP 调用的并发数限制成为瓶颈。 Spring Cloud 是 Java 微服务架构的代表性框架。如果使用 Spring Cloud 进行微服务开发，就会使用 Feign 进行声明式的服务调用。如果不使用 Spring Cloud，而直接使用 Spring Boot 进行微服务开发的话，可能会直接使用 Java 中最常用的 HTTP 客户端 Apache HttpClient 进行服务调用。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"JanKin Xie\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"JanKin Xie\\\",\\\"url\\\":\\\"\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"配置连接超时和读取超时参数的学问\",\"slug\":\"配置连接超时和读取超时参数的学问\",\"link\":\"#配置连接超时和读取超时参数的学问\",\"children\":[]},{\"level\":2,\"title\":\"Feign 和 Ribbon 配合使用，你知道怎么配置超时吗？\",\"slug\":\"feign-和-ribbon-配合使用-你知道怎么配置超时吗\",\"link\":\"#feign-和-ribbon-配合使用-你知道怎么配置超时吗\",\"children\":[]},{\"level\":2,\"title\":\"你是否知道 Ribbon 会自动重试请求呢？\",\"slug\":\"你是否知道-ribbon-会自动重试请求呢\",\"link\":\"#你是否知道-ribbon-会自动重试请求呢\",\"children\":[]},{\"level\":2,\"title\":\"并发限制了爬虫的抓取能力\",\"slug\":\"并发限制了爬虫的抓取能力\",\"link\":\"#并发限制了爬虫的抓取能力\",\"children\":[]},{\"level\":2,\"title\":\"重点回顾\",\"slug\":\"重点回顾\",\"link\":\"#重点回顾\",\"children\":[]},{\"level\":2,\"title\":\"思考与讨论\",\"slug\":\"思考与讨论\",\"link\":\"#思考与讨论\",\"children\":[]}],\"readingTime\":{\"minutes\":19.62,\"words\":5886},\"filePathRelative\":\"杂记/HTTP调用：你考虑到超时、重试、并发了吗？/README.md\",\"excerpt\":\"<p>今天，我们一起聊聊进行 HTTP 调用需要注意的超时、重试、并发等问题。</p>\\n<p>与执行本地方法不同，进行 HTTP 调用本质上是通过 HTTP 协议进行一次网络请求。网络请求必然有超时的可能性，因此我们必须考虑到这三点：</p>\\n<p>首先，框架设置的默认超时是否合理；</p>\\n<p>其次，考虑到网络的不稳定，超时后的请求重试是一个不错的选择，但需要考虑服务端接口的幂等性设计是否允许我们重试；</p>\\n<p>最后，需要考虑框架是否会像浏览器那样限制并发连接数，以免在服务并发很大的情况下，<strong>HTTP</strong> 调用的并发数限制成为瓶颈。</p>\\n<p><strong>Spring Cloud</strong> 是 <strong>Java</strong> 微服务架构的代表性框架。如果使用 <strong>Spring Cloud</strong> 进行微服务开发，就会使用 <strong>Feign</strong> 进行声明式的服务调用。如果不使用 <strong>Spring Cloud</strong>，而直接使用 <strong>Spring Boot</strong> 进行微服务开发的话，可能会直接使用 <strong>Java</strong> 中最常用的 <strong>HTTP</strong> 客户端 <strong>Apache HttpClient</strong> 进行服务调用。</p>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
